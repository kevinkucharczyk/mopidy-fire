{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","mopidy-fire/tests/app.jshint.js","mopidy-fire/tests/components/mf-album.jshint.js","mopidy-fire/tests/components/mf-artist.jshint.js","mopidy-fire/tests/components/mf-context-menu.jshint.js","mopidy-fire/tests/components/mf-input.jshint.js","mopidy-fire/tests/components/mf-player.jshint.js","mopidy-fire/tests/components/mf-playlist-tile.jshint.js","mopidy-fire/tests/components/mf-slider.jshint.js","mopidy-fire/tests/components/mf-track.jshint.js","mopidy-fire/tests/components/mf-volume-control.jshint.js","mopidy-fire/tests/controllers/error.jshint.js","mopidy-fire/tests/controllers/search.jshint.js","mopidy-fire/tests/helpers/destroy-app.js","mopidy-fire/tests/helpers/destroy-app.jshint.js","mopidy-fire/tests/helpers/format-duration.jshint.js","mopidy-fire/tests/helpers/module-for-acceptance.js","mopidy-fire/tests/helpers/module-for-acceptance.jshint.js","mopidy-fire/tests/helpers/resolver.js","mopidy-fire/tests/helpers/resolver.jshint.js","mopidy-fire/tests/helpers/start-app.js","mopidy-fire/tests/helpers/start-app.jshint.js","mopidy-fire/tests/initializers/mopidy.jshint.js","mopidy-fire/tests/integration/components/mf-album-test.js","mopidy-fire/tests/integration/components/mf-album-test.jshint.js","mopidy-fire/tests/integration/components/mf-artist-test.js","mopidy-fire/tests/integration/components/mf-artist-test.jshint.js","mopidy-fire/tests/integration/components/mf-context-menu-test.js","mopidy-fire/tests/integration/components/mf-context-menu-test.jshint.js","mopidy-fire/tests/integration/components/mf-input-test.js","mopidy-fire/tests/integration/components/mf-input-test.jshint.js","mopidy-fire/tests/integration/components/mf-player-test.js","mopidy-fire/tests/integration/components/mf-player-test.jshint.js","mopidy-fire/tests/integration/components/mf-playlist-tile-test.js","mopidy-fire/tests/integration/components/mf-playlist-tile-test.jshint.js","mopidy-fire/tests/integration/components/mf-slider-test.js","mopidy-fire/tests/integration/components/mf-slider-test.jshint.js","mopidy-fire/tests/integration/components/mf-track-test.js","mopidy-fire/tests/integration/components/mf-track-test.jshint.js","mopidy-fire/tests/integration/components/mf-volume-control-test.js","mopidy-fire/tests/integration/components/mf-volume-control-test.jshint.js","mopidy-fire/tests/page-object.js","mopidy-fire/tests/pages/artists.js","mopidy-fire/tests/pages/artists.jshint.js","mopidy-fire/tests/pages/context-menu.js","mopidy-fire/tests/pages/context-menu.jshint.js","mopidy-fire/tests/pages/input.js","mopidy-fire/tests/pages/input.jshint.js","mopidy-fire/tests/pages/playlist-tile.js","mopidy-fire/tests/pages/playlist-tile.jshint.js","mopidy-fire/tests/pages/track.js","mopidy-fire/tests/pages/track.jshint.js","mopidy-fire/tests/resolver.jshint.js","mopidy-fire/tests/router.jshint.js","mopidy-fire/tests/routes/album.jshint.js","mopidy-fire/tests/routes/application.jshint.js","mopidy-fire/tests/routes/artist.jshint.js","mopidy-fire/tests/routes/index.jshint.js","mopidy-fire/tests/routes/playlist.jshint.js","mopidy-fire/tests/routes/playlists.jshint.js","mopidy-fire/tests/routes/queue.jshint.js","mopidy-fire/tests/routes/search.jshint.js","mopidy-fire/tests/routes/settings.jshint.js","mopidy-fire/tests/services/loader-service.jshint.js","mopidy-fire/tests/services/local-storage.jshint.js","mopidy-fire/tests/services/mopidy.jshint.js","mopidy-fire/tests/services/title-service.jshint.js","mopidy-fire/tests/test-helper.js","mopidy-fire/tests/test-helper.jshint.js","mopidy-fire/tests/unit/controllers/error-test.js","mopidy-fire/tests/unit/controllers/error-test.jshint.js","mopidy-fire/tests/unit/controllers/search-test.js","mopidy-fire/tests/unit/controllers/search-test.jshint.js","mopidy-fire/tests/unit/helpers/format-duration-test.js","mopidy-fire/tests/unit/helpers/format-duration-test.jshint.js","mopidy-fire/tests/unit/initializers/mopidy-test.js","mopidy-fire/tests/unit/initializers/mopidy-test.jshint.js","mopidy-fire/tests/unit/routes/album-test.js","mopidy-fire/tests/unit/routes/album-test.jshint.js","mopidy-fire/tests/unit/routes/application-test.js","mopidy-fire/tests/unit/routes/application-test.jshint.js","mopidy-fire/tests/unit/routes/artist-test.js","mopidy-fire/tests/unit/routes/artist-test.jshint.js","mopidy-fire/tests/unit/routes/index-test.js","mopidy-fire/tests/unit/routes/index-test.jshint.js","mopidy-fire/tests/unit/routes/playlist-test.js","mopidy-fire/tests/unit/routes/playlist-test.jshint.js","mopidy-fire/tests/unit/routes/playlists-test.js","mopidy-fire/tests/unit/routes/playlists-test.jshint.js","mopidy-fire/tests/unit/routes/queue-test.js","mopidy-fire/tests/unit/routes/queue-test.jshint.js","mopidy-fire/tests/unit/routes/search-test.js","mopidy-fire/tests/unit/routes/search-test.jshint.js","mopidy-fire/tests/unit/routes/settings-test.js","mopidy-fire/tests/unit/routes/settings-test.jshint.js","mopidy-fire/tests/unit/services/loader-service-test.js","mopidy-fire/tests/unit/services/loader-service-test.jshint.js","mopidy-fire/tests/unit/services/local-storage-test.js","mopidy-fire/tests/unit/services/local-storage-test.jshint.js","mopidy-fire/tests/unit/services/mopidy-test.js","mopidy-fire/tests/unit/services/mopidy-test.jshint.js","mopidy-fire/tests/unit/services/title-service-test.js","mopidy-fire/tests/unit/services/title-service-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('mopidy-fire/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/components/mf-album.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/mf-album.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mf-album.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/components/mf-artist.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/mf-artist.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mf-artist.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/components/mf-context-menu.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/mf-context-menu.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mf-context-menu.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/components/mf-input.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/mf-input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mf-input.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/components/mf-player.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/mf-player.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mf-player.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/components/mf-playlist-tile.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/mf-playlist-tile.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mf-playlist-tile.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/components/mf-slider.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/mf-slider.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mf-slider.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/components/mf-track.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/mf-track.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mf-track.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/components/mf-volume-control.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/mf-volume-control.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mf-volume-control.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/controllers/error.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/error.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/error.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/controllers/search.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/search.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/search.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('mopidy-fire/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/helpers/format-duration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/format-duration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/format-duration.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'mopidy-fire/tests/helpers/start-app', 'mopidy-fire/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _mopidyFireTestsHelpersStartApp, _mopidyFireTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _mopidyFireTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _mopidyFireTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('mopidy-fire/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/helpers/resolver', ['exports', 'mopidy-fire/resolver', 'mopidy-fire/config/environment'], function (exports, _mopidyFireResolver, _mopidyFireConfigEnvironment) {\n\n  var resolver = _mopidyFireResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _mopidyFireConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _mopidyFireConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('mopidy-fire/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/helpers/start-app', ['exports', 'ember', 'mopidy-fire/app', 'mopidy-fire/config/environment'], function (exports, _ember, _mopidyFireApp, _mopidyFireConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _mopidyFireConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _mopidyFireApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('mopidy-fire/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/initializers/mopidy.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/mopidy.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/mopidy.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-album-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  var mopidyMock = _ember['default'].Service.extend({\n    getImages: function getImages(args) {\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        var response = {};\n        response[args] = [{\n          uri: 'testimage1'\n        }, {\n          uri: 'testimage2'\n        }, {\n          uri: 'testimage3'\n        }];\n        resolve(response);\n      });\n    }\n  });\n\n  var mockAlbum = {\n    name: 'Test Album 1',\n    uri: 'testalbum1',\n    date: '2016',\n    tracks: [{\n      name: 'Test Track 1',\n      uri: 'testtrack1'\n    }]\n  };\n\n  (0, _emberQunit.moduleForComponent)('mf-album', 'Integration | Component | mf album', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.container.registry.register('service:mopidy', mopidyMock);\n      this.container.registry.injection('component', 'mopidy', 'service:mopidy');\n    }\n  });\n\n  (0, _emberQunit.test)('should show image', function (assert) {\n    this.set('album', mockAlbum);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 44\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-album', [], ['album', ['subexpr', '@mut', [['get', 'album', ['loc', [null, [1, 17], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0], 'tracks', ['subexpr', '@mut', [['get', 'album.tracks', ['loc', [null, [1, 30], [1, 42]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 44]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.album__image').data('image'), 'testimage3');\n  });\n\n  (0, _emberQunit.test)('should show album name and date', function (assert) {\n    this.set('album', mockAlbum);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 44\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-album', [], ['album', ['subexpr', '@mut', [['get', 'album', ['loc', [null, [1, 17], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0], 'tracks', ['subexpr', '@mut', [['get', 'album.tracks', ['loc', [null, [1, 30], [1, 42]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 44]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.album__name').text().trim(), 'Test Album 1 (2016)');\n  });\n\n  (0, _emberQunit.test)('should show 1 track', function (assert) {\n    this.set('album', mockAlbum);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 44\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-album', [], ['album', ['subexpr', '@mut', [['get', 'album', ['loc', [null, [1, 17], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0], 'tracks', ['subexpr', '@mut', [['get', 'album.tracks', ['loc', [null, [1, 30], [1, 42]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 44]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('div').last().children().length, 1);\n  });\n\n  (0, _emberQunit.test)('should only show album cover row in listView mode', function (assert) {\n    this.set('album', mockAlbum);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 58\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-album', [], ['album', ['subexpr', '@mut', [['get', 'album', ['loc', [null, [1, 17], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0], 'tracks', ['subexpr', '@mut', [['get', 'album.tracks', ['loc', [null, [1, 30], [1, 42]]], 0, 0, 0, 0]], [], [], 0, 0], 'listView', true], ['loc', [null, [1, 0], [1, 58]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('div').first().siblings().length, 0);\n  });\n});","define('mopidy-fire/tests/integration/components/mf-album-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/mf-album-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/mf-album-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-artist-test', ['exports', 'ember-qunit', 'ember', 'mopidy-fire/tests/pages/artists'], function (exports, _emberQunit, _ember, _mopidyFireTestsPagesArtists) {\n\n  var mopidyMock = _ember['default'].Service.extend({\n    getImages: function getImages(args) {\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        var response = {};\n        response[args] = [{\n          uri: 'testimage1'\n        }, {\n          uri: 'testimage2'\n        }, {\n          uri: 'testimage3'\n        }];\n        resolve(response);\n      });\n    }\n  });\n\n  var mockArtist = {\n    name: 'Test Artist 1',\n    uri: 'testartist1'\n  };\n\n  (0, _emberQunit.moduleForComponent)('mf-artist', 'Integration | Component | mf artist', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.container.registry.register('service:mopidy', mopidyMock);\n      this.container.registry.injection('component', 'mopidy', 'service:mopidy');\n      this.set('artist', mockArtist);\n      _mopidyFireTestsPagesArtists['default'].setContext(this);\n    },\n\n    afterEach: function afterEach() {\n      _mopidyFireTestsPagesArtists['default'].removeContext();\n    }\n  });\n\n  (0, _emberQunit.test)('should show image', function (assert) {\n    _mopidyFireTestsPagesArtists['default'].render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 27\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-artist', [], ['artist', ['subexpr', '@mut', [['get', 'artist', ['loc', [null, [1, 19], [1, 25]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 27]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesArtists['default'].artistImage, 'testimage3');\n  });\n\n  (0, _emberQunit.test)('should show artist name', function (assert) {\n    _mopidyFireTestsPagesArtists['default'].render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 27\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-artist', [], ['artist', ['subexpr', '@mut', [['get', 'artist', ['loc', [null, [1, 19], [1, 25]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 27]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesArtists['default'].artistName, 'Test Artist 1');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-artist-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/mf-artist-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/mf-artist-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-context-menu-test', ['exports', 'ember-qunit', 'mopidy-fire/tests/pages/context-menu'], function (exports, _emberQunit, _mopidyFireTestsPagesContextMenu) {\n\n  (0, _emberQunit.moduleForComponent)('mf-context-menu', 'Integration | Component | mf context menu', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      _mopidyFireTestsPagesContextMenu['default'].setContext(this);\n    },\n\n    afterEach: function afterEach() {\n      _mopidyFireTestsPagesContextMenu['default'].removeContext();\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'mf-context-menu', ['loc', [null, [1, 0], [1, 19]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesContextMenu['default'].content.trim(), '');\n\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'mf-context-menu', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesContextMenu['default'].content.trim(), 'template block text');\n  });\n\n  (0, _emberQunit.test)('correctly shows and hides popover', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      internal text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      var child1 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 5,\n                'column': 4\n              },\n              'end': {\n                'line': 7,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      internal text 2\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 8,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(2);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'mf-context-menu', [], ['tagName', 'i', 'class', 'first-menu'], 0, null, ['loc', [null, [2, 4], [4, 24]]]], ['block', 'mf-context-menu', [], ['tagName', 'i', 'class', 'second-menu'], 1, null, ['loc', [null, [5, 4], [7, 24]]]]],\n        locals: [],\n        templates: [child0, child1]\n      };\n    })()));\n\n    _mopidyFireTestsPagesContextMenu['default'].toggleFirst();\n\n    assert.ok(_mopidyFireTestsPagesContextMenu['default'].firstIsOpen);\n\n    _mopidyFireTestsPagesContextMenu['default'].toggleSecond();\n\n    assert.notOk(_mopidyFireTestsPagesContextMenu['default'].firstIsOpen);\n    assert.ok(_mopidyFireTestsPagesContextMenu['default'].secondIsOpen);\n  });\n\n  (0, _emberQunit.test)('correctly calls external actions through component action', function (assert) {\n    assert.expect(6);\n    this.set('externalAction1', function () {\n      assert.ok(true, 'calls first external action');\n    });\n\n    this.set('externalAction2', function () {\n      assert.ok(true, 'calls second external action');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 5,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('button');\n            dom.setAttribute(el1, 'id', 'first-button');\n            var el2 = dom.createTextNode('test');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('button');\n            dom.setAttribute(el1, 'id', 'second-button');\n            var el2 = dom.createTextNode('test');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var element0 = dom.childAt(fragment, [1]);\n            var element1 = dom.childAt(fragment, [3]);\n            var morphs = new Array(2);\n            morphs[0] = dom.createElementMorph(element0);\n            morphs[1] = dom.createElementMorph(element1);\n            return morphs;\n          },\n          statements: [['element', 'action', ['handle', 'submitAction1'], ['target', ['get', 'component', ['loc', [null, [3, 73], [3, 82]]], 0, 0, 0, 0]], ['loc', [null, [3, 32], [3, 84]]], 0, 0], ['element', 'action', ['handle', 'submitAction2', false], ['target', ['get', 'component', ['loc', [null, [4, 80], [4, 89]]], 0, 0, 0, 0]], ['loc', [null, [4, 33], [4, 91]]], 0, 0]],\n          locals: ['component'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'mf-context-menu', [], ['tagName', 'i', 'submitAction1', ['subexpr', 'action', [['get', 'externalAction1', ['loc', [null, [2, 57], [2, 72]]], 0, 0, 0, 0]], [], ['loc', [null, [2, 49], [2, 73]]], 0, 0], 'submitAction2', ['subexpr', 'action', [['get', 'externalAction2', ['loc', [null, [2, 96], [2, 111]]], 0, 0, 0, 0]], [], ['loc', [null, [2, 88], [2, 112]]], 0, 0]], 0, null, ['loc', [null, [2, 4], [5, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    _mopidyFireTestsPagesContextMenu['default'].toggle();\n\n    assert.ok(_mopidyFireTestsPagesContextMenu['default'].isOpen, 'opens context menu after first click');\n\n    this.$('#first-button').click();\n\n    assert.notOk(_mopidyFireTestsPagesContextMenu['default'].isOpen, 'closes context menu after first click');\n\n    _mopidyFireTestsPagesContextMenu['default'].toggle();\n\n    assert.ok(_mopidyFireTestsPagesContextMenu['default'].isOpen, 'opens context menu after second click');\n\n    this.$('#second-button').click();\n\n    assert.ok(_mopidyFireTestsPagesContextMenu['default'].isOpen, 'keeps context menu open after second click');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-context-menu-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/mf-context-menu-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/mf-context-menu-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-input-test', ['exports', 'ember-qunit', 'mopidy-fire/tests/pages/input'], function (exports, _emberQunit, _mopidyFireTestsPagesInput) {\n\n  (0, _emberQunit.moduleForComponent)('mf-input', 'Integration | Component | mf input', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      _mopidyFireTestsPagesInput['default'].setContext(this);\n    },\n\n    afterEach: function afterEach() {\n      _mopidyFireTestsPagesInput['default'].removeContext();\n    }\n  });\n\n  (0, _emberQunit.test)('should call change action', function (assert) {\n    assert.expect(1);\n\n    this.set('changeAction', function () {\n      assert.ok(true, 'calls change action');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 94\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-input', [], ['onInput', ['subexpr', '@mut', [['get', 'changeAction', ['loc', [null, [1, 19], [1, 31]]], 0, 0, 0, 0]], [], [], 0, 0], 'value', ['subexpr', 'readonly', [['get', 'inputValue', ['loc', [null, [1, 48], [1, 58]]], 0, 0, 0, 0]], [], ['loc', [null, [1, 38], [1, 59]]], 0, 0], 'update', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'inputValue', ['loc', [null, [1, 80], [1, 90]]], 0, 0, 0, 0]], [], ['loc', [null, [1, 75], [1, 91]]], 0, 0]], [], ['loc', [null, [1, 67], [1, 92]]], 0, 0]], ['loc', [null, [1, 0], [1, 94]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    _mopidyFireTestsPagesInput['default'].fillIn('test').change();\n  });\n\n  (0, _emberQunit.test)('should call submit action', function (assert) {\n    assert.expect(1);\n\n    this.set('submitAction', function () {\n      assert.ok(true, 'calls submit action');\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 95\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-input', [], ['onSubmit', ['subexpr', '@mut', [['get', 'submitAction', ['loc', [null, [1, 20], [1, 32]]], 0, 0, 0, 0]], [], [], 0, 0], 'value', ['subexpr', 'readonly', [['get', 'inputValue', ['loc', [null, [1, 49], [1, 59]]], 0, 0, 0, 0]], [], ['loc', [null, [1, 39], [1, 60]]], 0, 0], 'update', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'inputValue', ['loc', [null, [1, 81], [1, 91]]], 0, 0, 0, 0]], [], ['loc', [null, [1, 76], [1, 92]]], 0, 0]], [], ['loc', [null, [1, 68], [1, 93]]], 0, 0]], ['loc', [null, [1, 0], [1, 95]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    _mopidyFireTestsPagesInput['default'].submit();\n  });\n\n  (0, _emberQunit.test)('should mutate value', function (assert) {\n    this.set('inputValue', 'test');\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 73\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-input', [], ['value', ['subexpr', 'readonly', [['get', 'inputValue', ['loc', [null, [1, 27], [1, 37]]], 0, 0, 0, 0]], [], ['loc', [null, [1, 17], [1, 38]]], 0, 0], 'update', ['subexpr', 'action', [['subexpr', 'mut', [['get', 'inputValue', ['loc', [null, [1, 59], [1, 69]]], 0, 0, 0, 0]], [], ['loc', [null, [1, 54], [1, 70]]], 0, 0]], [], ['loc', [null, [1, 46], [1, 71]]], 0, 0]], ['loc', [null, [1, 0], [1, 73]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    _mopidyFireTestsPagesInput['default'].fillIn('test2').change();\n\n    assert.equal(_mopidyFireTestsPagesInput['default'].inputValue, 'test2');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-input-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/mf-input-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/mf-input-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-player-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  var mopidyMock = _ember['default'].Service.extend({\n    currentTrack: {\n      artists: [{\n        name: 'Test Artist'\n      }],\n      name: 'Test Track',\n      length: 100,\n      uri: 'testuri'\n    },\n    isPlaying: false,\n    isRandom: false,\n    isRepeat: false,\n    currentPosition: 0\n  });\n\n  (0, _emberQunit.moduleForComponent)('mf-player', 'Integration | Component | mf player', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('service:mopidy', mopidyMock);\n      this.inject.service('mopidy', { as: 'mopidy' });\n    }\n  });\n\n  (0, _emberQunit.test)('should show track title', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'mf-player', ['loc', [null, [1, 0], [1, 13]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.footer__track-title').text().trim(), 'Test Track');\n  });\n\n  (0, _emberQunit.test)('should show track artist', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'mf-player', ['loc', [null, [1, 0], [1, 13]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.footer__track-artist').text().trim(), 'Test Artist');\n  });\n\n  (0, _emberQunit.test)('should react to play pause changes', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'mf-player', ['loc', [null, [1, 0], [1, 13]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.control__icon--playpause').hasClass('fa-play'));\n\n    this.set('mopidy.isPlaying', true);\n\n    assert.ok(this.$('.control__icon--playpause').hasClass('fa-pause'));\n  });\n\n  (0, _emberQunit.test)('should react to progress changes', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'mf-player', ['loc', [null, [1, 0], [1, 13]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.slider__bar-current')[0].style.width, '0%');\n\n    this.set('mopidy.currentPosition', 50);\n\n    assert.equal(this.$('.slider__bar-current')[0].style.width, '50%');\n  });\n\n  (0, _emberQunit.test)('should react to shuffle state changes', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'mf-player', ['loc', [null, [1, 0], [1, 13]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.fa-random').parent().hasClass('inactive'));\n\n    this.set('mopidy.isRandom', true);\n\n    assert.notOk(this.$('.fa-random').parent().hasClass('inactive'));\n  });\n\n  (0, _emberQunit.test)('should react to repeat state changes', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'mf-player', ['loc', [null, [1, 0], [1, 13]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.fa-repeat').parent().hasClass('inactive'));\n\n    this.set('mopidy.isRepeat', true);\n\n    assert.notOk(this.$('.fa-repeat').parent().hasClass('inactive'));\n  });\n});","define('mopidy-fire/tests/integration/components/mf-player-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/mf-player-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/mf-player-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-playlist-tile-test', ['exports', 'ember-qunit', 'mopidy-fire/tests/pages/playlist-tile'], function (exports, _emberQunit, _mopidyFireTestsPagesPlaylistTile) {\n\n  var longPlaylist = {\n    name: 'Test Playlist 1',\n    uri: 'testplaylist1',\n    tracks: [{\n      name: 'Test Track 1',\n      uri: 'testtrack1'\n    }, {\n      name: 'Test Track 2',\n      uri: 'testtrack2'\n    }],\n    images: [{\n      uri: 'testimage1'\n    }, {\n      uri: 'testimage2'\n    }, {\n      uri: 'testimage3'\n    }]\n  };\n\n  var shortPlaylist = {\n    name: 'Test Playlist 1',\n    uri: 'testplaylist1',\n    tracks: [{\n      name: 'Test Track 1',\n      uri: 'testtrack1'\n    }],\n    images: [{\n      uri: 'testimage1'\n    }, {\n      uri: 'testimage2'\n    }, {\n      uri: 'testimage3'\n    }]\n  };\n\n  var noPlaylist = {\n    name: 'Test Playlist 1',\n    uri: 'testplaylist1',\n    tracks: []\n  };\n\n  (0, _emberQunit.moduleForComponent)('mf-playlist-tile', 'Integration | Component | mf playlist tile', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      _mopidyFireTestsPagesPlaylistTile['default'].setContext(this);\n    },\n\n    afterEach: function afterEach() {\n      _mopidyFireTestsPagesPlaylistTile['default'].removeContext();\n    }\n  });\n\n  (0, _emberQunit.test)('should show playlist title', function (assert) {\n    this.set('playlist', longPlaylist);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 38\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-playlist-tile', [], ['playlist', ['subexpr', '@mut', [['get', 'playlist', ['loc', [null, [1, 28], [1, 36]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 38]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesPlaylistTile['default'].title, 'Test Playlist 1');\n  });\n\n  (0, _emberQunit.test)('should show playlist track count 2', function (assert) {\n    this.set('playlist', longPlaylist);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 38\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-playlist-tile', [], ['playlist', ['subexpr', '@mut', [['get', 'playlist', ['loc', [null, [1, 28], [1, 36]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 38]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesPlaylistTile['default'].subtitle, '2 tracks');\n  });\n\n  (0, _emberQunit.test)('should show playlist track count 1', function (assert) {\n    this.set('playlist', shortPlaylist);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 38\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-playlist-tile', [], ['playlist', ['subexpr', '@mut', [['get', 'playlist', ['loc', [null, [1, 28], [1, 36]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 38]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesPlaylistTile['default'].subtitle, '1 track');\n  });\n\n  (0, _emberQunit.test)('should show playlist track count 0', function (assert) {\n    this.set('playlist', noPlaylist);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 38\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-playlist-tile', [], ['playlist', ['subexpr', '@mut', [['get', 'playlist', ['loc', [null, [1, 28], [1, 36]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 38]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesPlaylistTile['default'].subtitle, '0 tracks');\n  });\n\n  (0, _emberQunit.test)('should show playlist medium image', function (assert) {\n    this.set('playlist', longPlaylist);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 38\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-playlist-tile', [], ['playlist', ['subexpr', '@mut', [['get', 'playlist', ['loc', [null, [1, 28], [1, 36]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 38]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesPlaylistTile['default'].image, 'testimage2');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-playlist-tile-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/mf-playlist-tile-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/mf-playlist-tile-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-slider-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('mf-slider', 'Integration | Component | mf slider', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('should have width 0', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 31\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-slider', [], ['currentPosition', 0], ['loc', [null, [1, 0], [1, 31]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.slider__bar-current')[0].style.width, '0%');\n  });\n\n  (0, _emberQunit.test)('should have width 33', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 32\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-slider', [], ['currentPosition', 33], ['loc', [null, [1, 0], [1, 32]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.slider__bar-current')[0].style.width, '33%');\n  });\n\n  (0, _emberQunit.test)('should trigger external action on mouse up', function (assert) {\n    this.set('externalAction', function (actual) {\n      var expected = 50;\n      assert.equal(actual, expected);\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 65\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-slider', [], ['currentPosition', 0, 'onMouseUp', ['subexpr', 'action', [['get', 'externalAction', ['loc', [null, [1, 48], [1, 62]]], 0, 0, 0, 0]], [], ['loc', [null, [1, 40], [1, 63]]], 0, 0]], ['loc', [null, [1, 0], [1, 65]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var offsetLeft = this.$().offset().left;\n    var width = this.$().width();\n\n    var mockEvent = $.Event(\"mouseup\", {\n      pageX: 0.5 * width + offsetLeft\n    });\n\n    this.$('.slider').trigger(mockEvent);\n  });\n});","define('mopidy-fire/tests/integration/components/mf-slider-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/mf-slider-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/mf-slider-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-track-test', ['exports', 'ember-qunit', 'mopidy-fire/tests/pages/track'], function (exports, _emberQunit, _mopidyFireTestsPagesTrack) {\n\n  var trackMock = {\n    name: 'Test Track',\n    length: 60000,\n    artists: [{\n      name: 'Test Artist'\n    }],\n    album: {\n      name: 'Test Album'\n    }\n  };\n\n  (0, _emberQunit.moduleForComponent)('mf-track', 'Integration | Component | mf track', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      _mopidyFireTestsPagesTrack['default'].setContext(this);\n    },\n\n    afterEach: function afterEach() {\n      _mopidyFireTestsPagesTrack['default'].removeContext();\n    }\n  });\n\n  (0, _emberQunit.test)('should show track title', function (assert) {\n    this.set('track', trackMock);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-track', [], ['track', ['subexpr', '@mut', [['get', 'track', ['loc', [null, [1, 17], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 24]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesTrack['default'].trackTitle, 'Test Track');\n  });\n\n  (0, _emberQunit.test)('should show track artist', function (assert) {\n    this.set('track', trackMock);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-track', [], ['track', ['subexpr', '@mut', [['get', 'track', ['loc', [null, [1, 17], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 24]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesTrack['default'].trackArtist, 'Test Artist');\n  });\n\n  (0, _emberQunit.test)('should show track album', function (assert) {\n    this.set('track', trackMock);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-track', [], ['track', ['subexpr', '@mut', [['get', 'track', ['loc', [null, [1, 17], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 24]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesTrack['default'].trackAlbum, 'Test Album');\n  });\n\n  (0, _emberQunit.test)('should show track duration', function (assert) {\n    this.set('track', trackMock);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'mf-track', [], ['track', ['subexpr', '@mut', [['get', 'track', ['loc', [null, [1, 17], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 24]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(_mopidyFireTestsPagesTrack['default'].trackDuration, '1:00');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-track-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/mf-track-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/mf-track-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/integration/components/mf-volume-control-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  var mopidyMock = _ember['default'].Service.extend({\n    currentVolume: 50,\n    isMute: false\n  });\n\n  (0, _emberQunit.moduleForComponent)('mf-volume-control', 'Integration | Component | mf volume control', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('service:mopidy', mopidyMock);\n      this.inject.service('mopidy', { as: 'mopidy' });\n    }\n  });\n\n  (0, _emberQunit.test)('should show volume state', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'mf-volume-control', ['loc', [null, [1, 0], [1, 21]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.slider__bar-current')[0].style.width, '50%');\n  });\n\n  (0, _emberQunit.test)('should react to mute changes', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'mf-volume-control', ['loc', [null, [1, 0], [1, 21]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.ok(this.$('.control__icon--volume').hasClass('fa-volume-up'));\n\n    this.set('mopidy.isMute', true);\n\n    assert.equal(this.$('.slider__bar-current')[0].style.width, '0%');\n\n    assert.ok(this.$('.control__icon--volume').hasClass('fa-volume-off'));\n  });\n\n  (0, _emberQunit.test)('should trigger mute action on click', function (assert) {\n    var _this = this;\n\n    assert.expect(1);\n\n    this.set('mopidy.toggleMute', function () {\n      _this.set('mopidy.isMute', !_this.get('mopidy.isMute'));\n      assert.equal(_this.get('mopidy.isMute'), true);\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'mf-volume-control', ['loc', [null, [1, 0], [1, 21]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    this.$('.control__icon--volume').click();\n  });\n});","define('mopidy-fire/tests/integration/components/mf-volume-control-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/mf-volume-control-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/mf-volume-control-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/page-object', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {\n  exports.attribute = _emberCliPageObject.attribute;\n  exports.clickOnText = _emberCliPageObject.clickOnText;\n  exports.clickable = _emberCliPageObject.clickable;\n  exports.collection = _emberCliPageObject.collection;\n  exports.contains = _emberCliPageObject.contains;\n  exports.count = _emberCliPageObject.count;\n  exports.create = _emberCliPageObject.create;\n  exports.fillable = _emberCliPageObject.fillable;\n  exports.selectable = _emberCliPageObject.fillable;\n  exports.hasClass = _emberCliPageObject.hasClass;\n  exports.is = _emberCliPageObject.is;\n  exports.isHidden = _emberCliPageObject.isHidden;\n  exports.isVisible = _emberCliPageObject.isVisible;\n  exports.notHasClass = _emberCliPageObject.notHasClass;\n  exports.property = _emberCliPageObject.property;\n  exports.text = _emberCliPageObject.text;\n  exports.triggerable = _emberCliPageObject.triggerable;\n  exports.value = _emberCliPageObject.value;\n  exports.visitable = _emberCliPageObject.visitable;\n  exports['default'] = {\n    attribute: _emberCliPageObject.attribute,\n    clickOnText: _emberCliPageObject.clickOnText,\n    clickable: _emberCliPageObject.clickable,\n    collection: _emberCliPageObject.collection,\n    contains: _emberCliPageObject.contains,\n    count: _emberCliPageObject.count,\n    create: _emberCliPageObject.create,\n    fillable: _emberCliPageObject.fillable,\n    hasClass: _emberCliPageObject.hasClass,\n    is: _emberCliPageObject.is,\n    isHidden: _emberCliPageObject.isHidden,\n    isVisible: _emberCliPageObject.isVisible,\n    notHasClass: _emberCliPageObject.notHasClass,\n    property: _emberCliPageObject.property,\n    selectable: _emberCliPageObject.fillable,\n    text: _emberCliPageObject.text,\n    triggerable: _emberCliPageObject.triggerable,\n    value: _emberCliPageObject.value,\n    visitable: _emberCliPageObject.visitable\n  };\n  Object.defineProperty(exports, 'buildSelector', {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.buildSelector;\n    }\n  });\n  Object.defineProperty(exports, 'findElementWithAssert', {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.findElementWithAssert;\n    }\n  });\n  Object.defineProperty(exports, 'findElement', {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.findElement;\n    }\n  });\n  Object.defineProperty(exports, 'getContext', {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.getContext;\n    }\n  });\n});","define('mopidy-fire/tests/pages/artists', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {\n  exports['default'] = (0, _emberCliPageObject.create)({\n    artistName: (0, _emberCliPageObject.text)('.artist__name'),\n    artistImage: (0, _emberCliPageObject.attribute)('data-image', '.artist__image')\n  });\n});","define('mopidy-fire/tests/pages/artists.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pages/artists.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/artists.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/pages/context-menu', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {\n  exports['default'] = (0, _emberCliPageObject.create)({\n    content: (0, _emberCliPageObject.text)('.context-menu__content'),\n    toggle: (0, _emberCliPageObject.clickable)('i'),\n    toggleFirst: (0, _emberCliPageObject.clickable)('i', { at: 0 }),\n    toggleSecond: (0, _emberCliPageObject.clickable)('i', { at: 1 }),\n    isOpen: (0, _emberCliPageObject.hasClass)('open', '.context-menu__content'),\n    firstIsOpen: (0, _emberCliPageObject.hasClass)('open', '.context-menu__content', { at: 0 }),\n    secondIsOpen: (0, _emberCliPageObject.hasClass)('open', '.context-menu__content', { at: 1 })\n  });\n});","define('mopidy-fire/tests/pages/context-menu.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pages/context-menu.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/context-menu.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/pages/input', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {\n  exports['default'] = (0, _emberCliPageObject.create)({\n    fillIn: (0, _emberCliPageObject.fillable)('input'),\n    inputValue: (0, _emberCliPageObject.value)('input'),\n    change: (0, _emberCliPageObject.triggerable)('change', 'input'),\n    submit: (0, _emberCliPageObject.triggerable)('keypress', 'input', { eventProperties: { keyCode: 13 } })\n  });\n});","define('mopidy-fire/tests/pages/input.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pages/input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/input.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/pages/playlist-tile', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {\n  exports['default'] = (0, _emberCliPageObject.create)({\n    title: (0, _emberCliPageObject.text)('.playlist-tile__title'),\n    subtitle: (0, _emberCliPageObject.text)('.playlist-tile__subtitle'),\n    image: (0, _emberCliPageObject.attribute)('src', '.playlist-tile__cover-image')\n  });\n});","define('mopidy-fire/tests/pages/playlist-tile.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pages/playlist-tile.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/playlist-tile.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/pages/track', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {\n  exports['default'] = (0, _emberCliPageObject.create)({\n    trackAlbum: (0, _emberCliPageObject.text)('.track__album'),\n    trackArtist: (0, _emberCliPageObject.text)('.track__artist'),\n    trackDuration: (0, _emberCliPageObject.text)('.track__duration'),\n    trackTitle: (0, _emberCliPageObject.text)('.track__title')\n  });\n});","define('mopidy-fire/tests/pages/track.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pages/track.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/track.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/routes/album.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/album.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/album.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/routes/artist.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/artist.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/artist.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/routes/playlist.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/playlist.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/playlist.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/routes/playlists.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/playlists.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/playlists.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/routes/queue.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/queue.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/queue.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/routes/search.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/search.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/search.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/routes/settings.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/settings.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/settings.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/services/loader-service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/loader-service.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/loader-service.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/services/local-storage.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/local-storage.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/local-storage.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/services/mopidy.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/mopidy.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/mopidy.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/services/title-service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/title-service.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/title-service.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/test-helper', ['exports', 'mopidy-fire/tests/helpers/resolver', 'ember-qunit'], function (exports, _mopidyFireTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_mopidyFireTestsHelpersResolver['default']);\n});","define('mopidy-fire/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/controllers/error-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:error', 'Unit | Controller | error', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('mopidy-fire/tests/unit/controllers/error-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/error-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/error-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/controllers/search-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:search', 'Unit | Controller | search', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('mopidy-fire/tests/unit/controllers/search-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/search-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/search-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/helpers/format-duration-test', ['exports', 'mopidy-fire/helpers/format-duration', 'qunit'], function (exports, _mopidyFireHelpersFormatDuration, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | format duration');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('should return formatted duration', function (assert) {\n    assert.expect(4);\n\n    assert.equal((0, _mopidyFireHelpersFormatDuration.formatDuration)([60000]), '1:00', '1:00');\n    assert.equal((0, _mopidyFireHelpersFormatDuration.formatDuration)([90000]), '1:30', '1:30');\n    assert.equal((0, _mopidyFireHelpersFormatDuration.formatDuration)([30000], '0:30'), '0:30');\n    assert.equal((0, _mopidyFireHelpersFormatDuration.formatDuration)([600000], '10:00'), '10:00');\n  });\n});","define('mopidy-fire/tests/unit/helpers/format-duration-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/format-duration-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/format-duration-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/initializers/mopidy-test', ['exports', 'ember', 'mopidy-fire/initializers/mopidy', 'qunit'], function (exports, _ember, _mopidyFireInitializersMopidy, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | mopidy', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _mopidyFireInitializersMopidy['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('mopidy-fire/tests/unit/initializers/mopidy-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/mopidy-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/mopidy-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/routes/album-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:album', 'Unit | Route | album', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mopidy-fire/tests/unit/routes/album-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/album-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/album-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mopidy-fire/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/routes/artist-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:artist', 'Unit | Route | artist', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mopidy-fire/tests/unit/routes/artist-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/artist-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/artist-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mopidy-fire/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/routes/playlist-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:playlist', 'Unit | Route | playlist', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mopidy-fire/tests/unit/routes/playlist-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/playlist-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/playlist-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/routes/playlists-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:playlists', 'Unit | Route | playlists', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mopidy-fire/tests/unit/routes/playlists-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/playlists-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/playlists-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/routes/queue-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:queue', 'Unit | Route | queue', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mopidy-fire/tests/unit/routes/queue-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/queue-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/queue-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/routes/search-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:search', 'Unit | Route | search', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mopidy-fire/tests/unit/routes/search-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/search-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/search-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/routes/settings-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:settings', 'Unit | Route | settings', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mopidy-fire/tests/unit/routes/settings-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/settings-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/settings-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/services/loader-service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:loader-service', 'Unit | Service | loader service', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('mopidy-fire/tests/unit/services/loader-service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/loader-service-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/loader-service-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/services/local-storage-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:local-storage', 'Unit | Service | local storage', {});\n\n  (0, _emberQunit.test)('should save object to local storage', function (assert) {\n    var service = this.subject();\n\n    var testObject = { name: 'John Doe' };\n\n    service.setItem('settings', testObject);\n\n    var storedValue = window.localStorage.getItem('mopidyFire.settings');\n\n    assert.equal(storedValue, '{\"name\":\"John Doe\"}');\n  });\n\n  (0, _emberQunit.test)('should read object from local storage', function (assert) {\n    var service = this.subject();\n\n    var testObject = { name: 'John Doe' };\n\n    window.localStorage.setItem('mopidyFire.settings', JSON.stringify(testObject));\n\n    var storedValue = service.getItem('settings');\n\n    assert.deepEqual(storedValue, testObject);\n  });\n\n  (0, _emberQunit.test)('should clear object from local storage', function (assert) {\n    var service = this.subject();\n\n    var testObject = { name: 'John Doe' };\n\n    window.localStorage.setItem('mopidyFire.settings', JSON.stringify(testObject));\n\n    service.removeItem('settings');\n\n    var storedValue = window.localStorage.getItem('mopidyFire.settings');\n\n    assert.equal(storedValue, undefined);\n  });\n});","define('mopidy-fire/tests/unit/services/local-storage-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/local-storage-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/local-storage-test.js should pass jshint.');\n  });\n});","define(\"mopidy-fire/tests/unit/services/mopidy-test\", [\"exports\"], function (exports) {});\n// Temporarily disable mopidy service testing\n// import { moduleFor, test } from 'ember-qunit';\n\n// moduleFor('service:mopidy', 'Unit | Service | mopidy', {\n//   beforeEach: function() {\n//     window.Mopidy = function() {\n//       this.on = function(callable) {\n//         callable(\"state:online\");\n//       };\n//     };\n//   }\n// });\n\n// test('it exists', function(assert) {\n//   let service = this.subject();\n\n//   assert.ok(service);\n// });","define('mopidy-fire/tests/unit/services/mopidy-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/mopidy-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/mopidy-test.js should pass jshint.');\n  });\n});","define('mopidy-fire/tests/unit/services/title-service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:title-service', 'Unit | Service | title service', {});\n\n  (0, _emberQunit.test)('should set title with empty string', function (assert) {\n    var service = this.subject();\n\n    var title = '';\n\n    service.setTitle(title);\n\n    var documentTitle = document.title;\n    var suffix = service.get('suffix');\n\n    assert.equal(documentTitle, suffix);\n  });\n\n  (0, _emberQunit.test)('should set title with null input', function (assert) {\n    var service = this.subject();\n\n    var title = null;\n\n    service.setTitle(title);\n\n    var documentTitle = document.title;\n    var suffix = service.get('suffix');\n\n    assert.equal(documentTitle, suffix);\n  });\n\n  (0, _emberQunit.test)('should set title with 0 input', function (assert) {\n    var service = this.subject();\n\n    var title = 0;\n\n    service.setTitle(title);\n\n    var documentTitle = document.title;\n    var suffix = service.get('suffix');\n    var separator = service.get('separator');\n\n    assert.equal(documentTitle, 0 + separator + suffix);\n  });\n\n  (0, _emberQunit.test)('should set title with space input', function (assert) {\n    var service = this.subject();\n\n    var title = ' ';\n\n    service.setTitle(title);\n\n    var documentTitle = document.title;\n    var suffix = service.get('suffix');\n\n    assert.equal(documentTitle, suffix);\n  });\n\n  (0, _emberQunit.test)('should set title with provided string', function (assert) {\n    var service = this.subject();\n\n    var title = 'Test Track - Test Artist';\n\n    service.setTitle(title);\n\n    var documentTitle = document.title;\n    var suffix = service.get('suffix');\n    var separator = service.get('separator');\n\n    assert.equal(documentTitle, 'Test Track - Test Artist' + separator + suffix);\n  });\n});","define('mopidy-fire/tests/unit/services/title-service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/title-service-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/title-service-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('mopidy-fire/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvljhEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}